Collections Framework:
    It's a collection of classes and interfaces that help us store and manipulate the data efficiently.
Why we should use Collections Framework?
    1) It's flexible (we don't need to provide size beforehand).
    2) It's dynamic (all the classes can increase and decrease their size at run time).
    3) There are built-in methods to perform common tasks.
    4) Pre-built data structures.
Downsides of Collections framework:
    1) We can't use primitive dat types we have to use wrapper classes which occupy 4 time more memory than primitive.
        int num = 10          //  4 memory locations
        Integer num1 = 10     // 16 memory locations
Wrapper:
    Wrapper classes are object types for all the primitive types.
Why should we learn about the wrapper types?
    1) Because collections framework only supports wrapper types.
    2) There are built-in methods to perform common tasks.

Downsides:
    1) We can't use primitive data types we have to use wrapper classes which occupy 4 times more memory than a primitive.
        int num = 10          //  4 memory locations
        Integer num1 = 10     // 16 memoty locations
Boxing:
    Converting a primitive to its correcponding wrapper type by manually calling methods.
        int pnum = 10;
        Integer wnum = new Integer(pnum);
Autoboxing:
    Converting from primitive to a wrapper type but here we don't need to call any methods explicitly.
        int pnum = 10;
        Integer wnum = pnum;
Unboxing:
    Converting a wrapper to a primitive by calling a method.
    Integer wnum = new Integer(10);
    int pnum = wnum;
AutoUnboxing:
    Converting a wrapper to a primitive without calling any methods.
    Integer wnum = new Integer(10);
    int pnum = wnum;
ArrayList Class:
    It is a classes in collections framework that allows us to store data like an array.
    Some common methods from this class are 1) add(), 2) remove(), 3) contains(), 4) size().
Iterator:
    Its a mechanism that allows us to iterate and delete data from any class in collections framework.
    It has hasNext(), next(), and remove().
Why we should learn about Iterator?
    Because loops are not safe when we perform an operation that can change the size of a data structure.
ArrayList vs LinkedList:
    Both of the classes implement the list interface which means both of them will have same methods.
ArrayList:
    Uses an array behind the scenes to store the data.
    We should use arrayList when we are retriveing the data most of the time and not inseritng the data in the start or in-between
    if we have to shift the data to the list
LinkedList:
    Linked-list does not store the data in consecutive memory locations that's why it is easier ot insert and remove
    the data from anywhere in a list.
    If you are going to manipulate the data (shifting of elements) always use linked-list.

If most of the time you use add or remove method then use LinkedList.
If most of the time you use get method use ArrayLIst.

Sets